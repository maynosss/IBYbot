import gc
from datetime import date, datetime

from aiogram import Bot, Dispatcher
from aiogram import types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor

import sqlite

import config
import messages

import exceptions
import expenses
from categories import Categories
from middlewares import AccessMiddleware


async def on_startup(_):
    await sqlite.db_start()


storage = MemoryStorage()
bot = Bot(config.API_TOKEN)
dp = Dispatcher(bot,
                storage=storage)


async def on_startup(_):
    await sqlite.db_start()
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.')
    print('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞.')


@dp.message_handler(commands=['start'])
async def start(message):
    await bot.send_message(message.chat.id,
                           text=messages.start_message.format(
                               message.from_user))
    await menu(message)
    await sqlite.create_profile(message.from_user.id)


@dp.message_handler(text='–í –º–µ–Ω—é')
async def menu(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    signup = types.KeyboardButton('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–µ–∞–Ω—Å')
    services = types.KeyboardButton('–£—Å–ª—É–≥–∏')
    other = types.KeyboardButton('–ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç')
    helper = types.KeyboardButton('–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –º–∞—Å—Ç–µ—Ä–æ–º')
    database = types.KeyboardButton('–ê–Ω–∫–µ—Ç–∞')
    master = types.KeyboardButton('–Ø - –º–∞—Å—Ç–µ—Ä')
    keyboard.add(signup, services, other, helper, database, master)
    await message.answer(
        text="–ß—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=keyboard)
    await message.delete()


chat_id = '364936872'


@dp.message_handler(text='–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–µ–∞–Ω—Å')
async def serve(message):
    keyboard = InlineKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)

    googleform = InlineKeyboardButton(text="üîÆ –ì—É–≥–ª —Ñ–æ—Ä–º–∞", url='https://forms.gle/wZ8xSs9J2jcxC35c7')
    keyboard.add(googleform)
    await message.answer(text="–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≥—É–≥–ª —Ñ–æ—Ä–º—É –Ω–∏–∂–µ:", reply_markup=keyboard)

    keyboard1 = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    back = types.KeyboardButton(text="–í –º–µ–Ω—é")
    keyboard1.add(back)


@dp.message_handler(text='–£—Å–ª—É–≥–∏')
async def services_handler(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    back = types.KeyboardButton(text="–í –º–µ–Ω—é")
    find = types.KeyboardButton(text='–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥')
    signup = types.KeyboardButton('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–µ–∞–Ω—Å')
    helper = types.KeyboardButton('–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –º–∞—Å—Ç–µ—Ä–æ–º')
    database = types.KeyboardButton('–ê–Ω–∫–µ—Ç–∞')
    master = types.KeyboardButton('–Ø - –º–∞—Å—Ç–µ—Ä')
    keyboard.add(find, back, signup, helper, database, master)
    await message.answer(
        text=messages.uslugi_message, reply_markup=keyboard)
    await message.delete()


@dp.message_handler(text='–ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç')
async def exampleofwork_handler(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    back = types.KeyboardButton(text="–í –º–µ–Ω—é")
    signup = types.KeyboardButton('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–µ–∞–Ω—Å')
    helper = types.KeyboardButton('–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –º–∞—Å—Ç–µ—Ä–æ–º')
    database = types.KeyboardButton('–ê–Ω–∫–µ—Ç–∞')
    master = types.KeyboardButton('–Ø - –º–∞—Å—Ç–µ—Ä')
    keyboard.add(back, signup, helper, database, master)
    await bot.send_photo(message.chat.id,
                         photo=messages.photo1)
    await bot.send_photo(message.chat.id,
                         photo=messages.photo2)
    await bot.send_photo(message.chat.id,
                         photo=messages.photo3)
    await menu(message)


@dp.message_handler(text='–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥')
async def description_handler(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    back = types.KeyboardButton(text="–í –º–µ–Ω—é", callback_data="")
    keyboard.add(back)
    await message.answer(text=messages.osobennosti_message,
                         reply_markup=keyboard)
    await message.delete()


@dp.message_handler(text='–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –º–∞—Å—Ç–µ—Ä–æ–º')
async def contacts_handler(message):
    keyboard = InlineKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)

    mastertelega = InlineKeyboardButton(text=messages.link_tg_message, url='https://t.me/maynosss')
    mastervk = InlineKeyboardButton(text=messages.link_vk_message, url='https://vk.com/maynosss')
    keyboard.add(mastertelega, mastervk)
    await message.answer(text="–ö–æ–Ω—Ç–∞–∫—Ç—ã –º–∞—Å—Ç–µ—Ä–∞ –Ω–∏–∂–µ:", reply_markup=keyboard)
    await message.delete()
    keyboard1 = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    back = types.KeyboardButton('–í –º–µ–Ω—é')
    keyboard1.add(back)
    await message.answer(text=messages.back_message, reply_markup=keyboard1)


class ProfileStatesGroup(StatesGroup):
    name = State()
    birthday = State()
    number = State()


def get_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton('/create'))

    return kb


def get_cancel_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton('/cancel'))

    return kb


@dp.message_handler(commands=['cancel'], state='*')
async def cmd_cancel(message: types.Message, state: FSMContext):
    if state is None:
        return

    await state.finish()
    await message.reply('–í—ã –ø—Ä–µ—Ä–≤–∞–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã!',
                        reply_markup=get_kb())


@dp.message_handler(text='–ê–Ω–∫–µ—Ç–∞')
async def cmd_start(message: types.Message) -> None:
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    back = types.KeyboardButton(text="–í –º–µ–Ω—é", callback_data="")
    keyboard.add(back)
    await message.answer('–î–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ /create',
                         reply_markup=get_kb())

    await sqlite.create_profile(message.from_user.id)


@dp.message_handler(commands=['create'])
async def cmd_create(message: types.Message) -> None:
    await message.reply("–ü—Ä–∏—Å—Ç—É–ø–∏–º! –ü—Ä–∏—à–ª–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û!",
                        reply_markup=get_kb())
    await sqlite.create_profile(user_id=message.from_user.id)
    await ProfileStatesGroup.next()


@dp.message_handler(state=ProfileStatesGroup.name)
async def load_name(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['name'] = message.text

    await message.reply('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è!')
    await ProfileStatesGroup.next()


@dp.message_handler(state=ProfileStatesGroup.birthday)
async def load_birthday(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['birthday'] = message.text

        await message.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!')
        await ProfileStatesGroup.next()


@dp.message_handler(state=ProfileStatesGroup.number)
async def check_number(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['number'] = message.text

    await message.reply('–í–∞—à–∞ –∞–∫–Ω–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∂–º–∏—Ç–µ /start')
    #    await sqlite.edit_profile(state, user_id=message.from_user.id)
    await state.finish()


@dp.message_handler(text='–Ø - –º–∞—Å—Ç–µ—Ä')
async def send_welcome(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤–µ—Å—Ç–∏ —É—á–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤\n\n"
        "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞ –Ω–∞–ø–∏—à–∏ '250 –∫—Ä–∞—Å–∫–∞'\n"
        "–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: /today\n"
        "–†–∞—Å—Ö–æ–¥—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: /month\n"
        "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–Ω–µ—Å—ë–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: /expenses\n"
        "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç: /categories")


@dp.message_handler(lambda message: message.text.startswith('/del'))
async def del_expense(message: types.Message):
    row_id = int(message.text[4:])
    expenses.delete_expense(row_id)
    answer_message = "–£–¥–∞–ª–∏–ª–∞"
    await message.answer(answer_message)


@dp.message_handler(commands=['categories'])
async def categories_list(message: types.Message):
    categories = Categories().get_all_categories()
    answer_message = "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç:\n\n* " +\
            ("\n* ".join([c.name+' ('+", ".join(c.aliases)+')' for c in categories]))
    await message.answer(answer_message)


@dp.message_handler(commands=['today'])
async def today_statistics(message: types.Message):
    answer_message: str = expenses.get_today_statistics()
    await message.answer(answer_message)


@dp.message_handler(commands=['month'])
async def month_statistics(message: types.Message):
    answer_message = expenses.get_month_statistics()
    await message.answer(answer_message)


@dp.message_handler(commands=['expenses'])
async def list_expenses(message: types.Message):
    last_expenses = expenses.last()
    if not last_expenses:
        await message.answer("–†–∞—Å—Ö–æ–¥—ã –µ—â—ë –Ω–µ –∑–∞–≤–µ–¥–µ–Ω—ã")
        return

    last_expenses_rows = [
        f"{expense.amount} —Ä—É–±. –Ω–∞ {expense.category_name} ‚Äî –Ω–∞–∂–º–∏ "
        f"/del{expense.id} –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
        for expense in last_expenses]
    answer_message = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ç—Ä–∞—Ç—ã:\n\n* " + "\n\n* "\
            .join(last_expenses_rows)
    await message.answer(answer_message)


@dp.message_handler()
async def add_expense(message: types.Message):
    try:
        expense = expenses.add_expense(message.text)
    except exceptions.NotCorrectMessage as e:
        await message.answer(str(e))
        return
    answer_message = (
        f"–î–æ–±–∞–≤–ª–µ–Ω—ã —Ç—Ä–∞—Ç—ã {expense.amount} —Ä—É–± –Ω–∞ {expense.category_name}.\n\n"
        f"{expenses.get_today_statistics()}")
    await message.answer(answer_message)


@dp.message_handler(content_types=['text'])
async def notresponsedmessage(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    back = types.KeyboardButton('–í –º–µ–Ω—é')
    keyboard.add(back)
    await bot.send_sticker(message.chat.id,
                           sticker='CAACAgIAAxkBAAEG4ixjn53FnPpL2LVBDcEuteQRFS-MfwACfRUAAlDlUEjpsJGXpy389SwE')
    await message.answer(text=messages.not_responsed_message, reply_markup=keyboard)


if __name__ == '__main__':
    if config.API_TOKEN == "":
        print("–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞. –í—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω.")
    else:
        executor.start_polling(dp, skip_updates=True,
                               on_startup=on_startup)
